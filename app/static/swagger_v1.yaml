swagger: '2.0'
info:
  version: "1.0.0"
  title: Stackoverflow-lite
  license:
    name: MIT
    url: https://github.com/jillo-abdullahi/stackoverflow-lite-challenge3/blob/master/LICENSE
  description: >-
    This web application is a platform that enables you to ask programming questions for those times when you get stuck and get answers from other like-minded individuals. What's even more fun is that you can provide your answers to questions from other programmers.
host: 'stackoverflowlite-api.herokuapp.com'
basePath: /stackoverflowlite/api/v1
schemes:
  - https
produces:
  - application/json
consumes:
  - application/json
paths:
  /auth/signup:
    x-summary: Register.
    post:
      summary: Register (Sign up) new user
      description: >-
        Create a new user. New user can only be added if there is no existing user with the same username or email provided has not already been registered.
      parameters:
        - in: body
          name: User registration information.
          description: Details of user to be created.
          schema:
            $ref: '#/definitions/Register'
      responses:
        '201':
          description: 'User has been registered successfully'
        '400':
          description: |-
            Response is returned if
            1. Username has already been taken
            2. Email has already been registered
            3. Password and confirm password do not match
            4. There are fields that have been left empty.
      tags:
        - Auth
  /auth/login:
    x-summary: Login
    post:
      summary: Login registered user
      description: Sign in a user who has already been registered.
      parameters:
        - in: body
          name: login information
          description: User email and password to be used for authentication.
          schema:
            $ref: '#/definitions/Login'
      responses:
        '200':
          description: 'User has been successfully authenticated'
        '401':
          description: 'User email or password is incorrect'
      tags:
        - Auth
  /questions:
    x-summary: Question
    get:
      summary: Get all questions.
      description: Logged in user can get questions posted by all other users.
      parameters: 
      - name: Authorization
        in: header
        description: Access token
        required: true
        type: string
      responses:
        '200':
          description: 'All questions posted returned.'
        '404':
          description: 'There are no questions that have been posted yet.'
        '401':
          description: 'Authorization token has not been provided or is invalid.'
        '422':
          description: 'Bad authorization header. Should start with Bearer and then the token'
      tags:
        - Questions  
    post:
      summary: Post a new question on the platform.
      description: User can post a new question.
      parameters:
      - name: Authorization
        in: header
        description: Access token
        required: true
        type: string
      - in: body
        name: Question details
        description: Title and description of question to be posted.
        schema:
          $ref: '#/definitions/PostQuestion'
      responses:
        '201':
          description: 'Question successfully posted'
        '400':
          description: |-
            Response is returned if
            1. Question already exists based on question title.
            2. Title or description field has been left empty.
        '401':
          description: 'Authorization token has not been provided or is invalid'
        '422':
          description: 'Bad authorization header. Should start with Bearer and then the token'
      tags:
        - Questions   
  /questions/{question_id}:
    x-summary: Question
    get:
      summary: Get specific question.
      description: Get a specific question using id and return it.
      parameters:
        - name: question_id
          in: path
          description: Id of question to be fetched.
          required: true
          type: number
        - name: Authorization
          in: header
          description: Access token
          required: true
          type: string
      responses:
        '200':
          description: 'Question details returned'
        '400':
          description: 'Question with the specified id does not exist'
        '401':
          description: 'Authorization token has not been provided or is invalid'
        '422':
          description: 'Bad authorization header. Should start with Bearer and then the token'
      tags:
        - Questions  
  /questions/{question_id}/answers:
    x-summary: Answers
    post:
      summary: Post an answer on the platform
      description: User can post an answer to question
      parameters:
        - name: question_id
          in: path
          description: Id of question to be answered.
          required: true
          type: number
        - name: Authorization
          in: header
          description: Access token
          required: true
          type: string
        - in: body
          name: answer
          description: answer to question
          schema:
            $ref: '#/definitions/PostAnswer'
      responses:
        '201':
          description: 'Answer successfully posted'
        '400':
          description: 'Question with specified id does not exist'
        '422':
          description: 'Bad authorization header. Should start with Bearer and then the token'
      tags:
        - Answers
  
definitions:
  Register:
    type: object
    required:
      - email
      - username
      - password
      - confirm
    properties:
      email:
        type: string
      username:
        type: string
      password:
        type: string
      confirm-password:
        type: string
    example:
      email: jayloabdullahi@gmail.com
      username: JilloWoche
      password: check1234
      confirm: check1234
  Login:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
      password:
        type: string
    example:
      email: jayloabdullahi@gmail.com
      password: check1234
  PostQuestion:
    type: object
    required:
      - title
      - description
    properties:
      title:
        type: string
      description:
        type: string
    example:
      title: Exiting Vim on Ubuntu
      description: How does one exit Vim on Ubuntu 16.04
  PostAnswer:
    type: object
    required:
      - description
    properties:
      description:
        type: string
    example:
      description: Type Ctrl+O
